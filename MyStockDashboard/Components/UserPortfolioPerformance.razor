@page "/portfolio-performance"
@using System.Reflection
@using System.Globalization
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.BarChart
@using MudBlazor
@using MyStockDashboard.Services
@inject StockDataService StockDataService
@inject ICurrencyConversionService CurrencyConversionService
@inject ISnackbar Snackbar

<PageTitle>Portfolio Performance</PageTitle>

<MudPaper Class="p-4">
    <MudText Typo="Typo.h4" Class="mb-4">Portfolio Performance Analytics</MudText>

    <!-- Display Overall Metrics -->
    @if (aggregatedHistory.Any())
    {
        <MudText Typo="Typo.subtitle1"
                 Color="@(percentageChange >= 0 ? Color.Success : Color.Error)"
                 Class="mb-4">
            @($"Current Value: {currentPortfolioValue.ToString("C", new CultureInfo("en-US"))} | Change: {totalChange.ToString("C", new CultureInfo("en-US"))} ({percentageChange:P2})")
        </MudText>
    }

    <!-- Date Filters -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6">
            <MudDatePicker @bind-Date="startDate" Label="Start Date"/>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudDatePicker @bind-Date="endDate" Label="End Date"/>
        </MudItem>
    </MudGrid>
    <MudButton OnClick="ApplyDateFilter" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4">
        Apply Date Filter
    </MudButton>

    <!-- Two-column layout for the charts -->
    <MudGrid>
        <!-- Overall Performance Chart with Load More Button -->
        <MudItem xs="12" sm="6">
            <div class="chart-container">
                <h3>Overall Performance</h3>
                @if (overallChartConfig != null)
                {
                    <div style="height:400px; width:600px; border:1px solid red;">
                        <Chart Config="overallChartConfig"></Chart>
                    </div>
                }
                else
                {
                    <p>Loading overall performance chart...</p>
                }
            </div>
        </MudItem>

        <!-- Per Stock Performance Chart -->
        <MudItem xs="12" sm="6">
            <div class="chart-container">
                <h3>Per Stock Performance</h3>
                @if (perStockChartConfig != null)
                {
                    <div style="height:400px; width:600px; border:1px solid red;">
                        <Chart Config="perStockChartConfig"></Chart>
                    </div>
                }
                else
                {
                    <p>Loading per-stock performance chart...</p>
                }
            </div>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {

    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;

// Portfolio metrics
    private double currentPortfolioValue = 0;
    private double totalChange = 0;
    private double percentageChange = 0;

// Aggregated overall historical data: (timestamp, total portfolio value)
    private List<(DateTime Time, double Value)> aggregatedHistory = new List<(DateTime, double)>();

// Per-stock performance: (symbol, change from startDate to endDate)
    private List<(string Symbol, double Change)> perStockPerformance = new List<(string, double)>();

// Portfolio symbols (loaded from DB)
    private List<string> portfolioSymbols = new List<string>();

// Chart configurations
    private LineConfig overallChartConfig;
    private BarConfig perStockChartConfig;

// Data point limit for overall chart
    private int _maxDataPoints = 10;

    protected override async Task OnInitializedAsync()
    {
        portfolioSymbols = await StockDataService.GetUserPortfolioSymbolsAsync();
        if (portfolioSymbols == null || !portfolioSymbols.Any())
        {
            Snackbar.Add("No stocks found in your portfolio. Please add some stocks first.", Severity.Warning);
            return;
        }

        await RebuildAggregatedHistoryAsync();
        CalculateOverallMetricsFromAggregatedHistory();
        InitializeOverallChart();
        UpdateOverallChartData();

        await CalculatePerStockPerformance();
        InitializePerStockChart();
        UpdatePerStockChartData();
    }


    private async Task ApplyDateFilter()
    {
        Console.WriteLine($"New startDate: {startDate}, endDate: {endDate}");
        _maxDataPoints = 10;
        await RebuildAggregatedHistoryAsync();
        CalculateOverallMetricsFromAggregatedHistory();
        UpdateOverallChartData();
        await CalculatePerStockPerformance();
        UpdatePerStockChartData();
        StateHasChanged();
    }


    /// <summary>
    /// Loads and aggregates historical data for all stocks in the portfolio.
    /// (Assumes each stock’s history is aligned by timestamp.)
    /// </summary>
    private async Task RebuildAggregatedHistoryAsync()
    {
        // Validate date filters.
        if (startDate.HasValue && endDate.HasValue && startDate.Value.Date > endDate.Value.Date)
        {
            Snackbar.Add("Start date cannot be greater than end date.", Severity.Error);
            return;
        }

        // List to store each stock's daily data (grouped by Date).
        var dailyStockData = new List<Dictionary<DateTime, (double Open, double Close)>>();

        foreach (var symbol in portfolioSymbols)
        {
            // Retrieve historical data for this stock.
            var history = await StockDataService.GetHistoricalDataAsync(symbol);

            // Apply date filters.
            if (startDate.HasValue && endDate.HasValue && startDate.Value.Date == endDate.Value.Date)
            {
                // For a single day, adjust the filter to cover the entire day.
                DateTime adjustedStart = startDate.Value.Date;
                DateTime adjustedEnd = startDate.Value.Date.AddDays(1).AddSeconds(-1);
                history = history.Where(h => h.Time >= adjustedStart && h.Time <= adjustedEnd).ToList();
            }
            else
            {
                if (startDate.HasValue)
                    history = history.Where(h => h.Time >= startDate.Value).ToList();
                if (endDate.HasValue)
                    history = history.Where(h => h.Time <= endDate.Value).ToList();
            }

            // Convert prices to your target currency.
            var convertedHistory = new List<(DateTime Time, double Price)>();
            foreach (var h in history)
            {
                decimal convertedAmount = await CurrencyConversionService.ConvertAsync((decimal)h.Price, h.Currency);
                convertedHistory.Add((h.Time, (double)convertedAmount));
            }

            // Group data by day: record the first (open) and last (close) price of the day.
            var dailyData = convertedHistory
                .GroupBy(x => x.Time.Date)
                .ToDictionary(
                    g => g.Key,
                    g => (
                        Open: g.OrderBy(x => x.Time).First().Price,
                        Close: g.OrderBy(x => x.Time).Last().Price)
                );

            dailyStockData.Add(dailyData);
        }

        // Build a union of all dates across stocks.
        var allDates = dailyStockData
            .SelectMany(dict => dict.Keys)
            .Distinct()
            .OrderBy(d => d)
            .ToList();

        // For each date, compute the aggregated portfolio value by summing each stock’s closing price.
        // If a stock has no data for a day, you might choose to use its last available closing price.
        var newAggregatedHistory = new List<(DateTime Date, double Value)>();
        foreach (var date in allDates)
        {
            double totalValue = 0;
            foreach (var stockDaily in dailyStockData)
            {
                if (stockDaily.TryGetValue(date, out var prices))
                {
                    totalValue += prices.Close;
                }
                else
                {
                    // Optional: use the last known closing value if there's no data on this day.
                    var previousDates = stockDaily.Keys.Where(d => d < date).OrderByDescending(d => d);
                    if (previousDates.Any())
                    {
                        var lastDate = previousDates.First();
                        totalValue += stockDaily[lastDate].Close;
                    }
                }
            }

            newAggregatedHistory.Add((date, totalValue));
        }

        aggregatedHistory = newAggregatedHistory;

        // Optionally, compute per-stock performance.
        // For a single day, this compares the first price (open) with the last price (close) for that day.
        // For multiple days, it compares the opening price on the first available day versus the closing price on the last.
        perStockPerformance = new List<(string Symbol, double Change)>();
        for (int i = 0; i < portfolioSymbols.Count; i++)
        {
            var symbol = portfolioSymbols[i];
            var dailyData = dailyStockData[i];

            // Find the earliest day on/after the startDate and the latest day on/before the endDate.
            var firstDate = dailyData.Keys
                .Where(d => !startDate.HasValue || d >= startDate.Value.Date)
                .OrderBy(d => d)
                .FirstOrDefault();
            var lastDate = dailyData.Keys
                .Where(d => !endDate.HasValue || d <= endDate.Value.Date)
                .OrderByDescending(d => d)
                .FirstOrDefault();

            if (firstDate != default && lastDate != default)
            {
                var open = dailyData[firstDate].Open;
                var close = dailyData[lastDate].Close;
                var change = close - open;
                perStockPerformance.Add((symbol, change));
            }
        }
    }


    /// <summary>
    /// Calculates overall portfolio metrics.
    /// </summary>
    private void CalculateOverallMetricsFromAggregatedHistory()
    {
        if (aggregatedHistory.Any())
        {
            // Ensure aggregated history is sorted by time ascending.
            var sortedData = aggregatedHistory.OrderBy(h => h.Time).ToList();

            // Determine the subset of data that's visible on the chart.
            var visibleData = sortedData;
            if (sortedData.Count > _maxDataPoints)
            {
                visibleData = sortedData.Skip(sortedData.Count - _maxDataPoints).ToList();
            }

            // Use the first and last visible data points to calculate metrics.
            currentPortfolioValue = visibleData.Last().Value;
            double initial = visibleData.First().Value;
            totalChange = currentPortfolioValue - initial;
            percentageChange = initial != 0 ? totalChange / initial : 0;
        }
        else
        {
            currentPortfolioValue = 0;
            totalChange = 0;
            percentageChange = 0;
        }
    }


    /// <summary>
    /// Calculates per-stock performance (change from start to end date) for each stock.
    /// </summary>
    private async Task CalculatePerStockPerformance()
    {
        perStockPerformance.Clear();
        foreach (var symbol in portfolioSymbols)
        {
            var history = await StockDataService.GetHistoricalDataAsync(symbol);
            if (startDate.HasValue)
                history = history.Where(h => h.Time >= startDate.Value).ToList();
            if (endDate.HasValue)
                history = history.Where(h => h.Time <= endDate.Value).ToList();

            if (history.Any())
            {
                var orderedHistory = history.OrderBy(h => h.Time).ToList();
                var firstData = orderedHistory.First();
                var lastData = orderedHistory.Last();


                // Convert both to USD (or your target currency)
                decimal initialConverted = await CurrencyConversionService.ConvertAsync((decimal)firstData.Price, firstData.Currency);
                decimal latestConverted = await CurrencyConversionService.ConvertAsync((decimal)lastData.Price, lastData.Currency);

                double percentageChangeForStock = 0;
                if (initialConverted != 0)
                {
                    // Multiply by 100 to express as a percentage.
                    percentageChangeForStock = (double)((latestConverted - initialConverted) / initialConverted * 100);
                }

                perStockPerformance.Add((symbol, percentageChangeForStock));
            }
            else
            {
                perStockPerformance.Add((symbol, 0));
            }
        }
    }


    private void InitializeOverallChart()
    {
        overallChartConfig = new LineConfig();

        // Ensure Options is initialized.
        if (overallChartConfig.Options == null)
        {
            overallChartConfig.Options = new LineOptions();
        }

        overallChartConfig.Options.Responsive = true;
        overallChartConfig.Options.Title = new OptionsTitle
        {
            Display = true,
            Text = "Overall Portfolio Performance"
        };
        
        
        overallChartConfig.Options.Scales = new Scales
        {
            XAxes = new List<CartesianAxis>
            {
                new CategoryAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Date" } }
            },
            YAxes = new List<CartesianAxis>
            {
                new LinearCartesianAxis
                {
                    ScaleLabel = new ScaleLabel { Display = true, LabelString = "Total Value" },
                    Ticks = new LinearCartesianTicks
                    {
                        Callback = new JavaScriptHandler<AxisTickCallback>("customJsFunctions.yTickCallback")
                    }
                }
            }
        };

        overallChartConfig.Data.Labels.Clear();
        overallChartConfig.Data.Datasets.Clear();
    }


    private void UpdateOverallChartData()
    {
        overallChartConfig.Data.Labels.Clear();
        overallChartConfig.Data.Datasets.Clear();

        var filteredData = aggregatedHistory;
        if (aggregatedHistory.Count > _maxDataPoints)
        {
            filteredData = aggregatedHistory.Skip(aggregatedHistory.Count - _maxDataPoints).ToList();
        }

        foreach (var entry in filteredData)
        {
            overallChartConfig.Data.Labels.Add(entry.Time.ToString("yyyy-MM-dd"));
        }

        var values = filteredData.Select(h => h.Value).ToList();
        var dataset = new LineDataset<double>(values)
        {
            Label = "Portfolio Value",
            BackgroundColor = "rgba(54, 162, 235, 0.2)",
            BorderColor = "rgba(54, 162, 235, 1)",
            Fill = false
        };

        overallChartConfig.Data.Datasets.Add(dataset);
    }

    private void InitializePerStockChart()
    {
        perStockChartConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = "Per-Stock Performance" },
                Scales = new BarScales()
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Stock" } }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Change" } }
                    }
                }
            }
        };

        perStockChartConfig.Data.Labels.Clear();
        perStockChartConfig.Data.Datasets.Clear();
    }

    private void UpdatePerStockChartData()
    {
        perStockChartConfig.Data.Labels.Clear();
        perStockChartConfig.Data.Datasets.Clear();

        foreach (var item in perStockPerformance)
        {
            perStockChartConfig.Data.Labels.Add(item.Symbol);
        }

        var percentages = perStockPerformance.Select(p => p.Change).ToList();

        List<string> backgroundColors = new List<string>();
        foreach (var pct in percentages)
        {
            backgroundColors.Add(pct >= 0 ? "rgba(0, 200, 0, 0.5)" : "rgba(200, 0, 0, 0.5)");
        }

        var pointBackGroundColor = new IndexableOption<string>(backgroundColors.ToArray());

        var dataset = new BarDataset<double>(percentages)
        {
            Label = "Stock Change (%)",
            BackgroundColor = pointBackGroundColor,
            BorderColor = "rgba(75, 192, 192, 1)",
            BorderWidth = 1
        };

        perStockChartConfig.Data.Datasets.Add(dataset);
    }
}