@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.LineChart
@using MyStockDashboard.Services
@inject NavigationManager NavigationManager
@inject MyStockDashboard.Services.StockDataService StockDataService
@inject StockStateService StockStateService


<div class="stock-chart-container">
    <!-- Stock Info (placed above the chart) -->
    <div class="stock-info">
        @if (stockData != null)
        {
            <h3>@(string.IsNullOrWhiteSpace(stockData.LongName) ? Symbol : stockData.LongName)</h3>
            <p style="color:@priceColor; transition: color 0.5s;">
                Current Price: @stockData.RegularMarketPrice.ToString("F2") (@currency)
                @if (priceDifference != 0)
                {
                    <span> (@((priceDifference > 0 ? "+" : "") + priceDifference.ToString("F2")))</span>
                }
            </p>
            <p style="color:@(stockData.RegularMarketChangePercent > 0 ? "green" : (stockData.RegularMarketChangePercent < 0 ? "red" : "yellow"))">
                Change: @stockData.RegularMarketChange.ToString("F2")
                (@stockData.RegularMarketChangePercent.ToString("F2")%)
            </p>
            <p>
                Day High: @stockData.RegularMarketDayHigh.ToString("F2") -
                Day Low: @stockData.RegularMarketDayLow.ToString("F2")
            </p>
            <p>
                Previous Close: @stockData.RegularMarketPreviousClose.ToString("F2")
            </p>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>

    <!-- Chart Section (placed below the stock info) -->
    <div class="chart-container">
        <h3>@Symbol Stock Price Chart (Intraday)</h3>
        @if (_lineConfig != null)
        {
            <div style="height:400px; width:600px; border:1px solid red;">
                <Chart Config="_lineConfig"></Chart>
            </div>
        }
        else
        {
            <p>Loading chart data...</p>
        }
        <MudButton OnClick="NavigateToStockPage" Variant="Variant.Filled" Color="Color.Primary" Style="margin-top:1rem; margin-right: 1rem;">
            Go to Stock
        </MudButton>
        <MudButton OnClick="LoadMoreData" Variant="Variant.Filled" Color="Color.Primary" Style="margin-top: 1rem;">
            Load More Data
        </MudButton>
    </div>
</div>

@code {

    // Parameter: stock symbol for this chart.
    [Parameter] public string Symbol { get; set; } = string.Empty;
    [Parameter] public List<(DateTime Time, double Price, string Currency)>? HistoricalData { get; set; }
    [Parameter] public YahooFinanceApi.Security? InitialStockData { get; set; }
    private string _currentSymbol;

    // Live data from YahooFinanceApi for the stock.
    private YahooFinanceApi.Security stockData;
    private YahooFinanceApi.Security liveStockData;

    private int _maxDataPoints = 10;

    // Chart configuration.
    private LineConfig _lineConfig;

    // List to store intraday (live) data points.
    private List<(DateTime Time, double Price)> intradayData = new List<(DateTime, double)>();


    // Timer to poll the live price.
    private Timer? _timer;

    private double? previousPrice = null;
    private string currency = string.Empty;
    private double priceDifference = 0;
    private string priceColor = "yellow";
    private CancellationTokenSource _cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        // 1. Load historical data from the DB
        // If historical data was provided, use it; otherwise, fetch it.
        if (HistoricalData != null && HistoricalData.Any())
        {
            intradayData = HistoricalData.Select(x => (x.Time, x.Price)).ToList();
        }
        else
        {
            var historical = await StockDataService.GetHistoricalDataAsync(Symbol);
            intradayData.Clear();
            intradayData.AddRange(historical.Select(x => (x.Time, x.Price)));
        }

        // If initial stock data was passed in, use it.
        if (InitialStockData != null)
        {
            stockData = InitialStockData;
            previousPrice = (double)stockData.RegularMarketPrice;
            currency = stockData.Currency;
            // If no historical data, add one live point.
            if (!intradayData.Any())
            {
                intradayData.Add((DateTime.UtcNow, previousPrice.Value));
            }
        }
        else
        {
            // Otherwise, fetch live data.
            stockData = await StockDataService.GetStockDataAsync(Symbol);
            if (stockData != null)
            {
                double currentPrice = (double)stockData.RegularMarketPrice;
                currency = stockData.Currency;
                if (!intradayData.Any())
                {
                    intradayData.Add((DateTime.UtcNow, currentPrice));
                }
                previousPrice = currentPrice;
            }
        }
        InitializeChart();
        UpdateChartData();
        StateHasChanged();
        InitializeTimer();
    }

    private void InitializeChart()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle { Display = true, Text = $"{Symbol} Live Price History" },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis { ScaleLabel = new ScaleLabel { Display = true, LabelString = "Time" } }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel { Display = true, LabelString = "Price" },
                            Ticks = new LinearCartesianTicks
                            {
                                Callback = new JavaScriptHandler<AxisTickCallback>("customJsFunctions.yTickCallback")
                            }
                        }
                    }
                }
            }
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        // Only reset if the symbol has actually changed.
        if (string.IsNullOrEmpty(_currentSymbol) || _currentSymbol != Symbol)
        {
            _currentSymbol = Symbol;

            // Clear previous state.
            intradayData.Clear();
            previousPrice = null;
            _timer?.Dispose();

            // Instead of only adding one live data point,
            // load the historical data from the DB.
            var historicalData = await StockDataService.GetHistoricalDataAsync(Symbol);
            if (historicalData.Any())
            {
                intradayData.AddRange(historicalData.Select(x => (x.Time, x.Price)));
            }
            else
            {
                stockData = await StockDataService.GetStockDataAsync(Symbol);
                if (stockData != null)
                {
                    double currentPrice = (double)stockData.RegularMarketPrice;
                    currency = stockData.Currency;
                    intradayData.Add((DateTime.UtcNow, currentPrice));
                    previousPrice = currentPrice;
                }
            }

            // Reinitialize chart configuration if needed.
            UpdateChartData();

            // Reinitialize the timer.
            //
            InitializeTimer();
        }
        // If the symbol hasnâ€™t changed, do nothing.
    }

    private async void InitializeTimer()
    {
        var periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(1));
        _ = Task.Run(async () =>
        {
            while (await periodicTimer.WaitForNextTickAsync(_cts.Token))
            {
                try
                {
                    var live = await StockDataService.GetStockDataAsync(Symbol);
                    if (live != null)
                    {
                        double newPrice = (double)live.RegularMarketPrice;
                        string stockCurrency = live.Currency;
                        // Only add the new data point if it's different from the last one.
                        if (!intradayData.Any() || Math.Abs(newPrice - intradayData.Last().Price) > 0.0001)
                        {
                            if (previousPrice.HasValue)
                            {
                                priceDifference = newPrice - previousPrice.Value;
                                priceColor = priceDifference > 0 ? "green" :
                                    priceDifference < 0 ? "red" : "yellow";
                            }

                            previousPrice = newPrice;
                            stockData = live;

                            var now = DateTime.UtcNow;
                            if (intradayData.Any() && now <= intradayData.Last().Time)
                            {
                                now = intradayData.Last().Time.AddMilliseconds(1);
                            }

                            intradayData.Add((now, newPrice));

                            await StockDataService.InsertStockPriceHistoryAsync(Symbol, newPrice, stockCurrency);
                            await InvokeAsync(() =>
                            {
                                UpdateChartData();
                                StateHasChanged();
                            });
                        }
                    }
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Timer error for {Symbol}: {ex.Message}");
                }
            }
        });
    }

    private void UpdateChartData()
    {
        _lineConfig.Data.Labels.Clear();
        _lineConfig.Data.Datasets.Clear();

        // Order the data by timestamp.
        var sortedData = intradayData.OrderBy(d => d.Time).ToList();

        if (sortedData.Count > _maxDataPoints)
        {
            sortedData = sortedData.Skip(sortedData.Count - _maxDataPoints).ToList();
        }

        // Use a more precise time format if needed (including seconds).
        foreach (var entry in sortedData)
        {
            _lineConfig.Data.Labels.Add(entry.Time.ToString("HH:mm:ss"));
        }

        // Create a dataset from the price data.
        var priceData = sortedData.Select(d => d.Price).ToList();

        // Compute point colors based on consecutive differences.
        var pointColors = new List<string>();
        if (priceData.Any())
        {
            double prev = priceData.First();
            foreach (var price in priceData)
            {
                if (price > prev)
                    pointColors.Add("green");
                else if (price < prev)
                    pointColors.Add("red");
                else
                    pointColors.Add("yellow");
                prev = price;
            }
        }

        var pointBackGroundColor = new IndexableOption<string>(pointColors.ToArray());
        var dataset = new LineDataset<double>(priceData)
        {
            Label = "Live Price",
            BackgroundColor = "rgba(75, 192, 192, 0.2)",
            BorderColor = "rgba(75, 192, 192, 1)",
            PointBackgroundColor = pointBackGroundColor,
            Fill = false
        };
        _lineConfig.Data.Datasets.Add(dataset);
    }
    
    private void NavigateToStockPage()
    {
        StockStateService.CurrentSymbol = Symbol;
        StockStateService.DetailedSecurity = stockData; // already fetched
        StockStateService.HistoricalData = new List<(DateTime Time, double Price, string Currency)>(intradayData.Select(x => (x.Time, x.Price, currency)));
        NavigationManager.NavigateTo($"/stock/{Symbol}");
    }


    private void LoadMoreData()
    {
        _maxDataPoints += 10; // Increase by 10 data points
        UpdateChartData();
        StateHasChanged();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
        _timer?.Dispose();
    }

}