@page "/dashboard"
@using MyStockDashboard.Components
@using MyStockDashboard.Models
@using MudBlazor
@inject MyStockDashboard.Services.StockDataService StockDataService

<MudCard>
    <MudCardContent>
        <MudAutocomplete T="Stock"
                         Label="Search Stocks"
                         Variant="Variant.Outlined"
                         Color="Color.Primary"
                         Value="SelectedStock"
                         ValueChanged="OnStockChanged"
                         SearchFunc="SearchStocks"
                         ToStringFunc="@(s => s?.CompanyName)"
                         MinCharacters="3"
                         Clearable="true"
                         ResetValueOnEmptyText="true">
            <ItemTemplate>
                @{
                var item = context;
                }
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        @item.CompanyName (@item.Symbol)
                        @if (item.StockPrice != 0)
                        {
                        <span style="margin-left: 1rem;">Price: @item.StockPrice.ToString("F2")</span>
                        }
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small" />
                </div>
            </ItemTemplate>
        </MudAutocomplete>
    </MudCardContent>
</MudCard>

<div class="stock-container">
    @foreach (var stock in StockPortfolio)
    {
    <div @key="stock">
        <StockChart Symbol="@stock" />
        <MudButton OnClick="() => RemoveStock(stock)"
                   Color="Color.Error"
                   Variant="Variant.Outlined"
                   Style="margin-top: 0.5rem;">
            Remove
        </MudButton>
    </div>
    }
</div>

@code {
    
    private List<string> StockPortfolio { get; set; } = new List<string>();

    
    private Stock SelectedStock { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // Load the user's portfolio from the database.
        StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
    }
    
    private async Task OnStockChanged(Stock newValue)
    {
        if (newValue != null && !StockPortfolio.Contains(newValue.Symbol.ToUpper()))
        {
            StockPortfolio.Add(newValue.Symbol.ToUpper());
            await StockDataService.AddStockToUserPortfolioAsync(newValue);
            StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
            StateHasChanged();
        }
        SelectedStock = null; // Reset after processing.
    }
    
    private async Task<IEnumerable<Stock>> SearchStocks(string value, CancellationToken cancellationToken)
    {
        return await StockDataService.SearchStocksAsync(value);
    }
    
    private async Task RemoveStock(string symbol)
    {
        StockPortfolio.Remove(symbol);
        await StockDataService.RemoveStockFromUserPortfolioAsync(symbol);
        StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
        StateHasChanged();
    }
    
}