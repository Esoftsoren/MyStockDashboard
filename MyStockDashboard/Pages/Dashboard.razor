@page "/dashboard"
@using MyStockDashboard.Components
@using MyStockDashboard.Models
@using MudBlazor
@inject MyStockDashboard.Services.StockDataService StockDataService

<MudCard>
    <MudCardContent>
        <MudAutocomplete T="Stock"
                         Label="Search Stocks"
                         Variant="Variant.Outlined"
                         Color="Color.Primary"
                         @bind-Value="SelectedStock"
                         SearchFunc="SearchStocks"
                         ToStringFunc="@(s => s?.CompanyName)"
                         MinCharacters="1"
                         Clearable="true"
                         ResetValueOnEmptyText="true">
            <ItemTemplate>
                @{
                // Capture the current item from the autocomplete.
                var item = context;
                }
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        @item.CompanyName (@item.Symbol)
                        @if (item.StockPrice != 0)
                        {
                        <span style="margin-left: 1rem;">Price: @item.StockPrice.ToString("F2")</span>
                        }
                    </div>
                    <!-- Decorative plus icon; no onclick here -->
                    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small" />
                </div>
            </ItemTemplate>
        </MudAutocomplete>
    </MudCardContent>
</MudCard>


<div class="stock-container">
    @foreach (var stock in StockPortfolio)
    {
        <div>
            <StockChart Symbol="@stock" />
            <MudButton OnClick="() => RemoveStock(stock)" 
                       Color="Color.Error" 
                       Variant="Variant.Outlined" 
                       Style="margin-top: 0.5rem;">
                Remove
            </MudButton>
        </div>
    }
</div>

@code {

// Instead of a hardcoded list, we will use the search results
// for now, we can keep a list of symbols in the portfolio.
    private List<string> StockPortfolio { get; set; } = new List<string>
    {
        "HNSA.ST", "AVXL", "SMCI"
    };
    
    // The current search text.
    private string searchText { get; set; } = string.Empty;

    // The search results returned from the API.
    private List<Stock> SearchResults { get; set; } = new List<Stock>();
    
    private Stock _selectedStock;
    private Stock SelectedStock
    {
        get => _selectedStock;
        set
        {
            // When a new stock is selected, add it to the portfolio if it isnâ€™t already there.
            if (value != null)
            {
                if (!StockPortfolio.Contains(value.Symbol.ToUpper()))
                {
                    StockPortfolio.Add(value.Symbol.ToUpper());
                }
                // Reset selection to clear the autocomplete.
                _selectedStock = null;
            }
            else
            {
                _selectedStock = value;
            }
        }
    }
    // When the user clicks the "Search" button, call the API.
    private async Task<IEnumerable<Stock>> SearchStocks(string value, CancellationToken cancellationToken)
    {
        return await StockDataService.SearchStocksAsync(value);
    }
    // When the user selects a stock from the search results.
    private void AddStock(Stock stock)
    {
        if (stock != null && !StockPortfolio.Contains(stock.Symbol.ToUpper()))
        {
            StockPortfolio.Add(stock.Symbol.ToUpper());
        }

        // Optionally clear the search results after adding.
        SearchResults.Clear();
    }
    
    private void RemoveStock(string symbol)
    {
        StockPortfolio.Remove(symbol);
        StateHasChanged();
    }
    
}