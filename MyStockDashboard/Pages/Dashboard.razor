@page "/dashboard"
@using MyStockDashboard.Components
@using MyStockDashboard.Models
@using MudBlazor
@inject MyStockDashboard.Services.StockDataService StockDataService

<MudCard>
    <MudCardContent>
        <MudAutocomplete T="Stock"
                         Label="Search Stocks"
                         Variant="Variant.Outlined"
                         Color="Color.Primary"
                         @bind-Value="SelectedStock"
                         SearchFunc="SearchStocks"
                         ToStringFunc="@(s => s?.CompanyName)"
                         MinCharacters="3"
                         Clearable="true"
                         MudIcon Icon="@Icons.Material.Filled.Search"
                         ResetValueOnEmptyText="true">
            <ItemTemplate>
                @{
                    // 'context' is provided by MudAutocomplete.
                    var item = context;
                }
                <div style="display: flex; justify-content: space-between; align-items: center; cursor: pointer;"
                     @onclick="@(() => OnStockSelected(item))">
                    <div>
                        @item.CompanyName (@item.Symbol)
                        @if (item.StockPrice != 0)
                        {
                            <span style="margin-left: 1rem;">Price: @item.StockPrice.ToString("F2")</span>
                        }
                    </div>
                    <!-- Decorative plus icon -->
                    <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small" />
                </div>
            </ItemTemplate>
        </MudAutocomplete>
    </MudCardContent>
</MudCard>

<div class="stock-container">
    @foreach (var stock in StockPortfolio)
    {
        <div>
            <StockChart Symbol="@stock" />
            <MudButton OnClick="() => RemoveStock(stock)" 
                       Color="Color.Error" 
                       Variant="Variant.Outlined" 
                       Style="margin-top: 0.5rem;">
                Remove
            </MudButton>
        </div>
    }
</div>

@code {
    
    private List<string> StockPortfolio { get; set; } = new List<string>();

    
    private Stock _selectedStock;
    private Stock SelectedStock
    {
        get => _selectedStock;
        set
        {
            if (value != null)
            {
                if (!StockPortfolio.Contains(value.Symbol.ToUpper()))
                {
                    StockPortfolio.Add(value.Symbol.ToUpper());
                }
                
                _selectedStock = null;
            }
            else
            {
                _selectedStock = value;
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Load the user's portfolio from the database.
        StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
    }
    
    private async Task OnStockSelected(Stock stock)
    {
        if (stock != null && !StockPortfolio.Contains(stock.Symbol.ToUpper()))
        {
            // Add to in-memory portfolio.
            StockPortfolio.Add(stock.Symbol.ToUpper());
            // Persist to the database.
            await StockDataService.AddStockToUserPortfolioAsync(stock);
            // Optionally reload the portfolio from the DB:
            StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
            StateHasChanged();
        }
        SelectedStock = null;
    }
    
    private async Task<IEnumerable<Stock>> SearchStocks(string value, CancellationToken cancellationToken)
    {
        return await StockDataService.SearchStocksAsync(value);
    }
    
    private async Task RemoveStock(string symbol)
    {
        StockPortfolio.Remove(symbol);
        await StockDataService.RemoveStockFromUserPortfolioAsync(symbol);
        StockPortfolio = await StockDataService.GetUserPortfolioSymbolsAsync();
        StateHasChanged();
    }
    
}